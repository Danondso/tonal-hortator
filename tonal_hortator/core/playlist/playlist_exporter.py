"""
Playlist exporting functionality for Tonal Hortator.

Handles saving and exporting playlists to various formats.
"""

import logging
import os
import re
import urllib.parse
from datetime import datetime
from typing import List

from tonal_hortator.core.models import Track

logger = logging.getLogger(__name__)


class PlaylistExporter:
    """Handles saving and exporting playlists."""

    def __init__(self) -> None:
        pass

    def save_playlist_m3u(
        self, tracks: List[Track], query: str, output_dir: str = "playlists"
    ) -> str:
        try:
            os.makedirs(output_dir, exist_ok=True)
            from .playlist_utils import create_playlist_name_static

            playlist_name = create_playlist_name_static(query)
            safe_filename = re.sub(r"[^\w\s-]", "", playlist_name).strip()
            safe_filename = re.sub(r"[-\s]+", " ", safe_filename)
            safe_filename = safe_filename[:50]
            filename = f"{safe_filename}.m3u"
            filepath = os.path.join(output_dir, filename)
            with open(filepath, "w", encoding="utf-8") as f:
                f.write("#EXTM3U\n")
                f.write("# Generated by Tonal Hortator (Local)\n")
                f.write(f"# Query: {query}\n")
                f.write(f"# Playlist: {playlist_name}\n")
                f.write(
                    f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                )
                f.write(f"# Tracks: {len(tracks)}\n")
                f.write("# Format: M3U Extended\n")
                f.write("# Target: Apple Music\n\n")
                for i, track in enumerate(tracks, 1):
                    artist = track.artist or "Unknown"
                    name = track.name or "Unknown"
                    album = track.album or "Unknown"
                    duration = (
                        track.total_time or 0
                    ) // 1000  # total_time is in milliseconds
                    similarity = track.similarity_score or 0
                    location = track.location or ""
                    f.write(f"#EXTINF:{duration},{artist} - {name}\n")
                    if location:
                        if location.startswith("file://"):
                            local_path = urllib.parse.unquote(location[7:])
                            f.write(f"{local_path}\n")
                        else:
                            f.write(f"{location}\n")
                    else:
                        f.write(f"# Missing file location for: {artist} - {name}\n")
                    f.write(f"# Album: {album}\n")
                    f.write(f"# Similarity: {similarity:.3f}\n")
                    f.write(f"# Track: {i}/{len(tracks)}\n\n")
            logger.info(f"üíæ Saved Apple Music playlist to: {filepath}")
            return filepath
        except Exception as e:
            logger.error(f"‚ùå Error saving playlist: {e}")
            raise
