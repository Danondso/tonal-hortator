#!/usr/bin/env python3
"""
Playlist output utilities for playlist generation
Handles M3U file generation and playlist formatting
"""

import logging
import os
import re
import urllib.parse
from datetime import datetime
from typing import Any, Dict, List

logger = logging.getLogger(__name__)


class PlaylistOutput:
    """Handle playlist output and formatting"""

    def save_playlist_m3u(
        self, tracks: List[Dict[str, Any]], query: str, output_dir: str = "playlists"
    ) -> str:
        """
        Save playlist as M3U file optimized for Apple Music

        Args:
            tracks: List of track dictionaries
            query: Original search query
            output_dir: Output directory for playlist files

        Returns:
            Path to saved playlist file
        """
        try:
            # Create output directory if it doesn't exist
            os.makedirs(output_dir, exist_ok=True)

            # Create filename with timestamp and sanitized query
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            sanitized_query = re.sub(r"[^\w\s-]", "", query).strip()
            sanitized_query = re.sub(r"[-\s]+", "-", sanitized_query)
            sanitized_query = sanitized_query[:50]  # Limit length

            filename = f"playlist_{timestamp}_{sanitized_query}.m3u"
            filepath = os.path.join(output_dir, filename)

            # Write M3U file optimized for Apple Music
            with open(filepath, "w", encoding="utf-8") as f:
                # Write M3U header
                f.write("#EXTM3U\n")

                # Write playlist metadata
                f.write("# Generated by Tonal Hortator (Local)\n")
                f.write(f"# Query: {query}\n")
                f.write(
                    f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                )
                f.write(f"# Tracks: {len(tracks)}\n")
                f.write("# Format: M3U Extended\n")
                f.write("# Target: Apple Music\n\n")

                # Write tracks
                for i, track in enumerate(tracks, 1):
                    # Get track info
                    artist = track.get("artist", "Unknown")
                    title = track.get("name", "Unknown")
                    album = track.get("album", "Unknown")
                    duration = track.get("duration_ms", 0) // 1000  # Convert to seconds
                    similarity = track.get("similarity_score", 0)
                    location = track.get("location", "")

                    # Write extended info line
                    # Format: #EXTINF:duration,artist - title
                    f.write(f"#EXTINF:{duration},{artist} - {title}\n")

                    # Write file path
                    if location:
                        # Convert file:// URLs to local paths for better Apple Music compatibility
                        if location.startswith("file://"):
                            # Remove file:// prefix and decode URL encoding
                            local_path = urllib.parse.unquote(location[7:])
                            f.write(f"{local_path}\n")
                        else:
                            f.write(f"{location}\n")
                    else:
                        # If no location, write a comment
                        f.write(f"# Missing file location for: {artist} - {title}\n")

                    # Write additional metadata as comments
                    f.write(f"# Album: {album}\n")
                    f.write(f"# Similarity: {similarity:.3f}\n")
                    f.write(f"# Track: {i}/{len(tracks)}\n\n")

            logger.info(f"💾 Saved Apple Music playlist to: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"❌ Error saving playlist: {e}")
            raise

    def print_playlist_summary(self, tracks: List[Dict[str, Any]], query: str) -> None:
        """Print a summary of the generated playlist"""
        print(f"\n🎵 Playlist for: '{query}'")
        print(f"📊 {len(tracks)} tracks found")
        print("-" * 60)

        for i, track in enumerate(tracks, 1):
            artist = track.get("artist", "Unknown")
            name = track.get("name", "Unknown")
            album = track.get("album", "Unknown")
            similarity = track.get("similarity_score", 0)

            print(f"{i:2d}. {artist} - {name}")
            print(f"    Album: {album}")
            print(f"    Similarity: {similarity:.3f}")
            print()

        if tracks:
            avg_similarity = sum(t.get("similarity_score", 0) for t in tracks) / len(
                tracks
            )
            print(f"📈 Average similarity: {avg_similarity:.3f}")
        print("-" * 60)
